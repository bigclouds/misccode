package main

import (
	"encoding/json"
	"fmt"
)

func test4() {
	a1 := []int{1, 2, 3}
	fmt.Printf("%s, %p, %p\n", a1, a1, &a1[0])

	for i := 0; i < 10; i++ {
		a1 = append(a1, i)
		fmt.Printf("%s, %p, %p\n", a1, a1, &a1[0])
	}

}

type AutoGenerated struct {
	Age   int    `json:"age"`
	Name  string `json:"name"`
	Child []int  `json:"child"`
}

func test3() {
	jsonStr1 := "{\"age\": 12,\"name\": \"potter\", \"child\":[1,2,3]}"
	a := AutoGenerated{}
	json.Unmarshal([]byte(jsonStr1), &a)
	aa1 := a.Child
	fmt.Printf("%s, %d, %d, %p, %p, %p\n", aa1, len(aa1), cap(aa1), aa1, &aa1[0], a.Child)

	jsonStr2 := "{\"age\": 14,\"name\": \"potter\", \"child\":[3,4,5,6,7,8,9,10]}"
	json.Unmarshal([]byte(jsonStr2), &a)
	aa2 := a.Child
	fmt.Printf("%s, %d, %d, %p, %p, %p\n", aa1, len(aa1), cap(aa1), aa1, &aa1[0], a.Child)
	fmt.Printf("%s, %d, %d, %p, %p, %p\n", aa2, len(aa2), cap(aa2), aa2, &aa2[0], a.Child)
	//fmt.Println(aa1, len(aa1), cap(aa1), &aa1, &a.Child)
	//fmt.Println(aa2, len(aa2), cap(aa2), &aa2, &a.Child)
}

func test(a int) (value int) {
	defer func(b int) {
		value = b + 1
	}(a)
	a = a + 10
	return a
}

func test2() []int {
	v := []int{1, 2, 3}
	for i := range v {
		v = append(v, i)
	}
	return v
}

func main() {
	fmt.Println(test(10))
	fmt.Println(test2())
	test3()
	// test4()
}
