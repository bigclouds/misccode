# Docker compose definition to run mist.io in production mode, so no mounted
# code, no dev containers etc. Only this single file is required.

version: '2.0'

services:


  mongodb:
    image: mongo:3.2
    restart: on-failure:5
    volumes:
      - mongodb:/data/db:rw

  rabbitmq:
    image: rabbitmq:3.6.6-management
    restart: on-failure:5

  memcached:
    image: memcached
    restart: on-failure:5


  elasticsearch:
    image: elasticsearch:5.6.10
    restart: on-failure:5
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:rw

  logstash:
    image: mistce/logstash:v4-2-1
    restart: on-failure:5
    depends_on:
      - elasticsearch
      - rabbitmq

  elasticsearch-manage:
    image: mistce/elasticsearch-manage:v4-2-1
    command: ./scripts/add_templates.py
    restart: on-failure:5
    depends_on:
      - elasticsearch
      - rabbitmq

  kibana:
    image: kibana:5.6.10
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    restart: on-failure:5
    depends_on:
      - elasticsearch


  socat:
    image: mist/docker-socat
    restart: on-failure:5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw

  mailmock:
    image: mist/mailmock
    restart: on-failure:5

  swagger:
    image: mist/swagger-ui
    environment:
      API_URL: /api/v1/spec
    restart: on-failure:5


  celery-prefork: &backend
    image: mistce/api:v4-2-1
    depends_on:
      - memcached
      - mongodb
      - elasticsearch
      - rabbitmq
    volumes:
      - ./settings:/etc/mist/settings
    environment:
      SETTINGS_FILE: /etc/mist/settings/settings.py
    stdin_open: true
    tty: true
    restart: on-failure:5
    command: bin/wait-all bin/celery-prefork

  celery-gevent:
    <<: *backend
    command: bin/wait-all bin/celery-gevent

  scheduler:
    <<: *backend
    command: bin/wait-all bin/scheduler

  poller:
    <<: *backend
    command: bin/wait-all bin/poller

  cilia:
    <<: *backend
    command: bin/wait-all bin/cilia

  beat:
    <<: *backend
    command: bin/wait-all bin/beat

  hubshell:
    <<: *backend
    command: bin/wait-all bin/hubshell

  api:
    <<: *backend
    command: bin/wait-all bin/uwsgi
    expose:
      - 80

  sockjs:
    <<: *backend
    command: bin/wait-all bin/sockjs
    expose:
      - 8081

  apply-migrations:
    <<: *backend
    command: bin/wait-all bin/migrate

  ui:
    image: mistce/ui:v4-2-1
    command: sh /entry.sh
    stdin_open: true
    tty: true
    restart: on-failure:5
    expose:
      - 80

  landing:
    image: mistce/landing:v4-2-1
    command: sh /entry.sh
    stdin_open: true
    tty: true
    restart: on-failure:5
    expose:
      - 80


  nginx:
    image: mistce/nginx:v4-2-1
    restart: on-failure:5
    ports:
      - 80:80
    depends_on:
      - api
      - sockjs
      - landing
      - ui


  influxdb:
    image: influxdb
    environment:
      INFLUXDB_DB: telegraf
      INFLUXDB_BIND_ADDRESS: "0.0.0.0:8088"
    ports:
      - 8083:8083
      - 8086:8086
    volumes:
      - influxdb:/var/lib/influxdb

  gocky:
    image: mistce/gocky:v4-2-1
    command: -config /etc/gocky/config.toml
    ports:
      - 9096:9096
      - 9097:9097
    depends_on:
      - rabbitmq


  traefik:
    image: traefik:v1.5
    command:
      # - --logLevel=INFO
      - --accesslog
      # - --accesslog.format=json
      - --api
      - --api.entrypoint=traefik
      - --rest
      - --rest.entrypoint=traefik
      - --defaultentrypoints=http
      - --entrypoints=Name:http Address::80
      - --entrypoints=Name:traefik Address::8080
    ports:
      - 8040:80
      - 8041:8080


volumes:
  elasticsearch: {}
  influxdb: {}
  mongodb: {}
